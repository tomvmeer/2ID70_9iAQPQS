FROM studentRegistrationsToDegrees SD, courseRegistrations CR, CourseOffers CO WHERE SD.studentRegistrationId = CR.studentRegistrationId and SD.studentId = %1%  and SD.degreeId = %2% and CR.grade > 5 and CR.grade is not NULL and CR.CourseOfferId = CO.CourseOfferId Order by year, quartile;
SELECT distinct P.StudentId FROM pointsPerS P, studentNoFails SNF WHERE P.StudentRegistrationId = SNF.studentRegistrationId and P.GPA > %1% ORDER BY P.studentid;
SELECT A.DegreeId, count(CASE WHEN A.Gender = 'F' THEN 1 END)/count(A.StudentId)::float as femalePercentage FROM ActiveStudents A GROUP BY A.DegreeId ORDER BY A.DegreeId;
SELECT count(CASE WHEN S.Gender = 'F'  THEN 1 END)/count(SR.StudentId)::float as percentageFemale FROM Degrees D, StudentRegistrationsToDegrees SR, Students S WHERE SR.DegreeId = D.DegreeId and S.StudentId = SR.StudentId and D.Dept = %1%;
SELECT CR.CourseId, count(CASE WHEN CR.Grade >= %1% THEN 1 END)/count(CR.Grade)::float as percentagePassing FROM CourseRegistrations CR WHERE CR.Grade IS NOT NULL GROUP BY CR.CourseId ORDER BY CR.CourseId;
WITH HighestGrade(CourseOfferId, Grade) as ( SELECT CR.CourseOfferId, max(CR.Grade) FROM test CR, CourseOffers CO WHERE CR.CourseOfferId = CO.CourseOfferId and CO.year = 2018 and CO.Quartile = 1 GROUP BY CR.CourseOfferId) SELECT CR.studentId, count(CR.StudentId) FROM test CR, HighestGrade HG WHERE HG.Grade= CR.Grade and CR.CourseOfferId = HG.CourseOfferId GROUP BY CR.StudentId HAVING count(CR.StudentId) >= %1%;
SELECT SR.degreeId, S.birthYearStudent, S.gender, avg(P.GPA) FROM Students S, pointspers P, StudentRegistrationsToDegrees SR, ActiveStudents A WHERE A.StudentId = S.studentId and S.studentId = SR.studentId and P.StudentRegistrationId = SR.studentRegistrationId GROUP BY CUBE (SR.degreeId, S.birthYearStudent, S.gender) ORDER BY SR.degreeId, S.birthYearStudent, S.gender asc;
with studenCountPerCourseOffer( CourseOfferId, countStudentRegistartionId) as (SELECT CourseOfferId, count(StudentRegistrationID) FROM courseRegistrations CR Group by CR.CourseOfferID), assistantCountPerCourseOffer (CourseOfferId, countStudentRegistartionId) as (SELECT CourseOfferId, count(StudentRegistrationID) FROM StudentAssistants SA Group by SA.CourseOfferID) SELECT CO.CourseName, CO.Year, CO.quartile FROM studenCountPerCourseOffer SPR , assistantCountPerCourseOffer APR, CourseOffers CO WHERE SPR.CourseOfferId = APR.CourseOfferId and SPR.CourseOfferId = Co.CourseOfferId and APR.countStudentRegistartionId < CEIL(SPR.countStudentRegistartionId/50) Order by CO.CourseId;
